<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "https://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_indexing">
    <title>Indexing</title>
    <subtitle>Do I know you?</subtitle>
    <para>
        There is an @Indexed annotation for fields. We wanted to try this out, and use it to guide the
        next test. We added @Indexed to the ID field of the Movie class. This field is intended to represent
        the external ID that will be used in URIs and will be stable across database imports and updates.
        This time we went with the default GraphRepository (previously Finder) to retrieve the indexed movie.
    </para>
    <para>
        <example>
            <title>Exact Indexing for Movie id</title>
            <programlisting language="java" ><![CDATA[@NodeEntity class Movie {
    @Indexed int id;
    String title;
    int year;
}

@Autowired DirectGraphRepositoryFactory graphRepositoryFactory;

@Test public void persistedMovieShouldBeRetrievableFromGraphDb() {
    int id = 1;
    Movie forrestGump = new Movie(id, "Forrest Gump", 1994).persist();
    GraphRepository<Movie> movieRepository =
                               graphRepositoryFactory.createGraphRepository(Movie.class);
    Movie retrievedMovie = movieRepository.findByPropertyValue("id", id);
    assertEqual("retrieved movie matches persisted one", forrestGump, retrievedMovie);
    assertEqual("retrieved movie title matches", "Forrest Gump", retrievedMovie.getTitle());
}
]]></programlisting>
        </example>
    </para>
</chapter>
