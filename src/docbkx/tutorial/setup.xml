<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "https://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_setup">
    <title>The Spring stack</title>
    <!--<subtitle></subtitle>-->
    <para>
        Being Spring developers, we naturally choose components from the Spring stack to do all the
        heavy lifting. After all, we have the concept etched out, so we're already halfway there.
    </para>
    <para>
        What database would fit both the complex network of cineasts, movies, actors, roles, ratings,
        and friends, while also being able to support the recommendation algorithms that we had in mind?
        We had no idea.
    </para>
    <para>
        But hold your horses, there is this new Spring Data project, started in 2010, which brings
        the convenience of the Spring programming model to NOSQL databases. That should be in line with
        what we already know, providing us with a quick start. We had a look at the list of projects
        supporting the different NOSQL databases out there. Only one of them mentioned the kind of social
        network we were thinking of - Spring Data Graph for Neo4j, a graph database. Neo4j's slogan of
        "value in relationships" and the accompanying docs looked like what we needed.
        We decided to give it a try.
    </para>
    <section>
        <title>Required setup</title>
        <para>
            To set up the project we created a public github account and began setting up the
            infrastructure for a spring web project using Maven as the build system. So we added
            the dependencies for the Spring Framework libraries, added the web.xml for the DispatcherServlet,
            and the applicationContext.xml in the webapp directory.
        </para>
        <para>
            <example>
                <title>Project pom.xml</title>
                <programlisting language="xml"><![CDATA[<properties>
    <spring.version>3.0.5.RELEASE</spring.version>
</properties>

<dependencies>
<dependency>
    <groupId>org.springframework</groupId>
    <!-- abbreviated for all the dependencies -->
    <artifactId>spring-(core,context,aop,aspects,tx,webmvc)</artifactId>
    <version>${spring.version}</version>
</dependency>
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>${spring.version}</version>
    <scope>test</scope>
</dependency>
</dependencies>

<build><plugins>
	<plugin>
		<groupId>org.mortbay.jetty</groupId>
		<artifactId>jetty-maven-plugin</artifactId>
		<version>7.1.2.v20100523</version>
		<configuration>
		   <webAppConfig>
		     <contextPath>/</contextPath>
		   </webAppConfig>
		</configuration>
	</plugin>
</plugins></build>
]]></programlisting>
            </example>

            <example>
                <title>Project web.xml</title>
                <programlisting language="xml"><![CDATA[<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

<servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
</servlet-mapping>
]]></programlisting>
            </example>
        </para>
        <para>
            With this setup in place we were ready for the first spike: creating a simple MovieController
            showing a static view. See the Spring Framework documentation for information on doing this.
        </para>
        <!--<para>-->
            <!--Next was the setting up of Spring Data Graph. We looked at the README at the Spring Data Graph-->
            <!--Github, and then checked the Spring Data Graph manual. There was a bit of Maven setup for AspectJ-->
            <!--but apart from that, not much new stuff. Time to add a few lines to our Spring configuration.-->
        <!--</para>-->
        <para>
            <example>
                <title>Project applicationContext.xml</title>
                <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	https://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
	https://www.springframework.org/schema/context/spring-context-3.0.xsd">

 <context:annotation-config/>
 <context:spring-configured/>
 <context:component-scan base-package="org.neo4j.cineasts">
     <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
 </context:component-scan>

 <tx:annotation-driven mode="aspectj"/>
</beans>
]]></programlisting>
            </example>
            <example>
                <title>Project dispatcherServlet-servlet.xml</title>
                <programlisting language="xml"><![CDATA[<mvc:annotation-driven/>
<mvc:resources mapping="/images/**" location="/images/"/>
<mvc:resources mapping="/resources/**" location="/resources/"/>
<context:component-scan base-package="org.neo4j.cineasts.controller"/>

<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/views/" p:suffix=".jsp"/>

<tx:annotation-driven mode="aspectj"/>
]]></programlisting>
            </example>

        </para>
        <para>
            We spun up Jetty by doing <code>mvn jetty:run</code> to see if there were any obvious
            issues with the config. It all seemed to work just fine.
        </para>
    </section>
</chapter>
