<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "https://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_annotations">
    <title>Annotating the domain</title>
    <subtitle>Decorations</subtitle>
    <para>
        Looking at the Spring Data Graph documentation, we found a simple
        <ulink url="https://github.com/SpringSource/spring-data-graph-examples/tree/master/hello-worlds">Hello World example</ulink>
        and tried to understand it. The entity classes were annotated with <code>@NodeEntity</code>.
        That was simple, so we added the annotation to our domain classes too. Entity classes representing
        relationships were instead annotated with <code>@RelationshipEntity</code>.
        Property fields were taken care of automatically.
    </para>
    <para>
        It was time to put our entities to a test. How could we now be assured that an attribute really was persisted to
        the graph store? We wanted to load the entity and check the attribute.

        Either we could have a GraphDatabaseContext injected and use its <code>getById(entityId)</code>
        method to load the entity. Or use a more versatile Repository. We decided to keep things simple for now.

        Looking at the documentation revealed that there are a bunch of methods introduced to the
        entities by the aspects to support working with the entities.
        That's not entirely obvious. We found two that would do the job:
        <code>entity.persist()</code> <code>entity.getNodeId()</code>.
    </para>
    <para>
        So here's what our test ended up looking like:
    </para>
    <para>
        <example>
            <title>First test case</title>
            <programlisting language="java" ><![CDATA[@Autowired GraphDatabaseContext graphDatabaseContext;

@Test public void persistedMovieShouldBeRetrievableFromGraphDb() {
    Movie forrestGump = new Movie("Forrest Gump", 1994).persist();
    Movie retrievedMovie = graphDatabaseContext.getById(forrestGump.getNodeId());
    assertEqual("retrieved movie matches persisted one", forrestGump, retrievedMovie);
    assertEqual("retrieved movie title matches", "Forrest Gump", retrievedMovie.getTitle());
}
]]></programlisting>
        </example>
    </para>
    <para>
        It worked! But hold on, what about transactions? After all, we had not declared the test to be
        transactional. After some further reading we learned that calling <code>persist()</code> outside
        of a transaction automatically creates an implicit transaction. Very much like an EntityManager
        would behave. We also learned that when performing more complex operations on the entities we'd
        need external transactions, but not for this simple test.
    </para>
    <para>
        <example>
            <title>Movie class with annotation</title>
            <programlisting language="java"><![CDATA[@NodeEntity
class Movie {
    String id;
    String title;
    int year;
    Set<Role> cast;
}
]]></programlisting>
        </example>
    </para>
</chapter>
