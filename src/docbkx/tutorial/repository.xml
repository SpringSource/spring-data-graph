<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "https://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_repository">
    <title>Repositories</title>
    <subtitle>Serving a good cause</subtitle>
    <para>
        We wanted to add repositories with domain-specific operations. We started by creating a
        movie-specific repository, simply by creating an empty interface. It is more convenient to
        work with a named interface rather than different versions of a generic one.
        <example>
            <title>Movie repository</title>
            <programlisting language="java"><![CDATA[package org.neo4j.cineasts.repository;
public interface MovieRepository extends GraphRepository<Movie> {}
]]></programlisting>
        </example>
        Then we added it to the Spring context configuration by simply adding:
        <example>
            <title>Repository context configuration</title>
            <programlisting language="xml"><![CDATA[<datagraph:repositories base-package="org.neo4j.cineasts.repository"/>
]]></programlisting>
        </example>
        We then created the domain-specific repository class, annotating it with <code>@Repository</code> and
        <code>@Transactional</code>, and injected the movie repository.
    </para>
    <para>
        <example>
            <title>Domain-specific repository</title>
            <programlisting language="java"><![CDATA[@Repository @Transactional
public class CineastsRepostory {
  @Autowired MovieRepository movieRepository;

  public Movie getMovie(int id) {
      return movieRepository.findByPropertyValue("id", id);
  }
}
]]></programlisting>
        </example>
    </para>
    <para>
        We did the same for the actors and users.
    </para>
</chapter>
