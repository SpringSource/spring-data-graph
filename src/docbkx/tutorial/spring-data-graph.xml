<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "https://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_about-spring-data">
    <title>Spring Data Graph</title>
    <subtitle>Conjuring magic</subtitle>
    <para>
        So far it had all been pure Spring Framework and Neo4j. However, using the Neo4j code in our domain
        classes polluted them with graph database details. For this application, we wanted to keep the domain
        classes clean. Spring Data Graph promised to do the heavy lifting for us, so we continued investigating it.
    </para>
    <para>
        Spring Data Graph depends heavily on AspectJ <xref linkend="reference:aspectj-details">features</xref>.
        Some parts of our classes would get new behavior,
        but it would not be visible in our code. The upside of this is that you get rid of a lot of boilerplate
        code.
    </para>
    <para>
        The first step was to configure Maven:
        <example>
            <title>Spring Data Graph Maven configuration</title>
            <programlisting language="xml"><![CDATA[<properties>
    <aspectj.version>1.6.12.M1</aspectj.version>
</properties>

<dependency>
  <groupId>org.springframework.data</groupId>
  <artifactId>spring-data-neo4j</artifactId>
  <version>1.1.0</version>
</dependency>

<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjrt</artifactId>
    <version>${aspectj.version}</version>
</dependency>

<build> <plugins> <plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>aspectj-maven-plugin</artifactId>
    <version>1.2</version>
    <dependencies>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
    </dependencies>
    <executions>
        <execution>
            <goals>
                <goal>compile</goal>
                <goal>test-compile</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <outxml>true</outxml>
        <aspectLibraries>
            <aspectLibrary>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
            </aspectLibrary>
            <aspectLibrary>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-neo4j</artifactId>
            </aspectLibrary>
        </aspectLibraries>
        <source>1.6</source>
        <target>1.6</target>
    </configuration>
</plugin> </plugins> </build>
]]></programlisting>
      </example>
    </para>
    <para>
        The Spring context configuration was much easier, thanks to a provided namespace:
    </para>
    <para>
        <example>
            <title>Spring Data Graph context configuration</title>
            <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans" ...
       xmlns:datagraph="http://www.springframework.org/schema/data/graph"
       xsi:schemaLocation="... http://www.springframework.org/schema/data/graph
       https://www.springframework.org/schema/data/graph/datagraph-1.0.xsd">
    ...
    <datagraph:config storeDirectory="data/graph.db"/>
    ...
</beans>
]]></programlisting>
        </example>
    </para>
</chapter>
