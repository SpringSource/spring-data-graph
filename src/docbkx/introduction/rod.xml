<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "https://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<preface>
    <title>Foreword by Rod Johnson</title>
    <para>
        I’m excited about Spring Data Graph for several reasons.
    </para>
    <para>
        First, this project is in a very important space. We are in an era of transition. A very few years ago, a
        relational database was a given for storing nearly all the data in nearly all applications. While relational
        databases remain important, new application requirements and massive data proliferation have prompted a richer
        choice of data stores. Graph databases have some very interesting strengths, and Neo4j is proving itself
        valuable in many applications. It's a choice you should add to your toolbox.
    </para>
    <para>
        Second, Spring Data Graph is an innovative project, which makes it easy to work with one of the most interesting
        new data stores. Unfortunately, the proliferation of new data stores has not been matched by innovation in
        programming models to work with them. Ironically, just after modern ORM mapping made working with relational
        data in Java relatively easy, the data store disruption occurred, and developers were back to square one:
        struggling once more with clumsy, low level APIs. Working with most non-relational technologies is overly
        complex and imposes too much work on developers. Spring Data Graph makes working with Neo4j amazingly easy, and
        therefore has the potential to make you more successful as a developer. Its use of AspectJ to eliminate
        persistence code from your domain model is truly innovative, and on the cutting edge of today’s Java
        technologies.
    </para>
    <para>
        Third, I'm excited about Spring Data Graph for personal reasons. I no longer get to write code as often as I
        would like. My initial convictions that Spring and AspectJ could both make building applications with Neo4j
        dramatically easier and cross-store object navigation possible gave me an excuse for a much-needed coding binge
        early in 2010. This led to a prototype of what became Spring Data Graph — at times written paired with Emil. I’m
        sure the vast majority of my code has long since been replaced (probably for the better) by coders who aren't
        rusty — thanks Michael and Thomas! — but I retain my pleasant memories.
    </para>
    <para>
        Finally, Spring Data Graph is part of the broader Spring Data project: one of the key areas in which Spring is
        innovating to help meet new application requirements. I encourage you to explore Spring Data, and — better
        still — become involved in the community and contribute.
    </para>
    <para>
        Enjoy the Spring Data Graph book, and happy coding!
    </para>
    <para>
        Rod Johnson, Founder, Spring and SVP, Application Platform, VMware
    </para>
</preface>

